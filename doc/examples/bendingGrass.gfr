import DemoGafferExtension
import Gaffer
import GafferImage
import GafferOSL
import GafferScene
import IECore
import imath

Gaffer.Metadata.registerValue( parent, "serialiser:milestoneVersion", 0, persistent=False )
Gaffer.Metadata.registerValue( parent, "serialiser:majorVersion", 58, persistent=False )
Gaffer.Metadata.registerValue( parent, "serialiser:minorVersion", 4, persistent=False )
Gaffer.Metadata.registerValue( parent, "serialiser:patchVersion", 0, persistent=False )

__children = {}

parent["variables"].addChild( Gaffer.NameValuePlug( "image:catalogue:port", Gaffer.IntPlug( "value", defaultValue = 0, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ), "imageCataloguePort", Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic ) )
parent["variables"].addChild( Gaffer.NameValuePlug( "project:name", Gaffer.StringPlug( "value", defaultValue = 'default', flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ), "projectName", Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic ) )
parent["variables"].addChild( Gaffer.NameValuePlug( "project:rootDirectory", Gaffer.StringPlug( "value", defaultValue = '$HOME/gaffer/projects/${project:name}', flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ), "projectRootDirectory", Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic ) )
__children["defaultFormat"] = GafferImage.FormatPlug( "defaultFormat", defaultValue = GafferImage.Format( 1920, 1080, 1.000 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, )
parent.addChild( __children["defaultFormat"] )
__children["SceneReader"] = GafferScene.SceneReader( "SceneReader" )
parent.addChild( __children["SceneReader"] )
__children["SceneReader"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["PathFilter"] = GafferScene.PathFilter( "PathFilter" )
parent.addChild( __children["PathFilter"] )
__children["PathFilter"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Instancer"] = GafferScene.Instancer( "Instancer" )
parent.addChild( __children["Instancer"] )
__children["Instancer"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["BendDeformer"] = DemoGafferExtension.BendDeformer( "BendDeformer" )
parent.addChild( __children["BendDeformer"] )
__children["BendDeformer"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["PathFilter1"] = GafferScene.PathFilter( "PathFilter1" )
parent.addChild( __children["PathFilter1"] )
__children["PathFilter1"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Expression"] = Gaffer.Expression( "Expression" )
parent.addChild( __children["Expression"] )
__children["Expression"]["__out"].addChild( Gaffer.FloatPlug( "p0", direction = Gaffer.Plug.Direction.Out, defaultValue = 0.0, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Expression"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Orientation"] = GafferScene.Orientation( "Orientation" )
parent.addChild( __children["Orientation"] )
__children["Orientation"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Terrain"] = Gaffer.Box( "Terrain" )
parent.addChild( __children["Terrain"] )
__children["Terrain"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Terrain"].addChild( GafferScene.Plane( "Plane" ) )
__children["Terrain"]["Plane"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Terrain"].addChild( GafferOSL.OSLObject( "OSLObject1" ) )
__children["Terrain"]["OSLObject1"]["primitiveVariables"].addChild( Gaffer.NameValuePlug( "P", Gaffer.V3fPlug( "value", defaultValue = imath.V3f( 0, 0, 0 ), interpretation = IECore.GeometricData.Interpretation.Point ), True, "primitiveVariable", Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic ) )
__children["Terrain"]["OSLObject1"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Terrain"].addChild( GafferOSL.OSLShader( "InPoint1" ) )
__children["Terrain"]["InPoint1"].loadShader( "ObjectProcessing/InPoint" )
__children["Terrain"]["InPoint1"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Terrain"].addChild( GafferScene.PathFilter( "PathFilter2" ) )
__children["Terrain"]["PathFilter2"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Terrain"].addChild( GafferOSL.OSLShader( "Noise1" ) )
__children["Terrain"]["Noise1"].loadShader( "Pattern/Noise" )
__children["Terrain"]["Noise1"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Terrain"].addChild( Gaffer.BoxOut( "BoxOut" ) )
__children["Terrain"]["BoxOut"].setup( GafferScene.ScenePlug( "in", ) )
__children["Terrain"]["BoxOut"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Terrain"].addChild( GafferScene.ScenePlug( "out", direction = Gaffer.Plug.Direction.Out, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Terrain"].addChild( GafferOSL.OSLObject( "OSLObject" ) )
__children["Terrain"]["OSLObject"]["primitiveVariables"].addChild( Gaffer.NameValuePlug( "customFloat", Gaffer.FloatPlug( "value", defaultValue = 0.0, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ), True, "primitiveVariable", Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic ) )
__children["Terrain"]["OSLObject"]["primitiveVariables"].addChild( Gaffer.NameValuePlug( "Cs", Gaffer.Color3fPlug( "value", defaultValue = imath.Color3f( 0, 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ), True, "primitiveVariable1", Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic ) )
__children["Terrain"]["OSLObject"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Terrain"].addChild( GafferOSL.OSLShader( "InPoint" ) )
__children["Terrain"]["InPoint"].loadShader( "ObjectProcessing/InPoint" )
__children["Terrain"]["InPoint"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Terrain"].addChild( GafferOSL.OSLShader( "Noise" ) )
__children["Terrain"]["Noise"].loadShader( "Pattern/Noise" )
__children["Terrain"]["Noise"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Terrain"].addChild( GafferOSL.OSLShader( "RemapFloat" ) )
__children["Terrain"]["RemapFloat"].loadShader( "Utility/RemapFloat" )
__children["Terrain"]["RemapFloat"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Terrain"].addChild( GafferScene.Transform( "Transform" ) )
__children["Terrain"]["Transform"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Terrain"].addChild( Gaffer.Dot( "Dot" ) )
__children["Terrain"]["Dot"].setup( GafferScene.FilterPlug( "in", defaultValue = 0, minValue = 0, maxValue = 7, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.AcceptsDependencyCycles, ) )
__children["Terrain"]["Dot"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Terrain"].addChild( Gaffer.Dot( "Dot1" ) )
__children["Terrain"]["Dot1"].setup( GafferScene.FilterPlug( "in", defaultValue = 0, minValue = 0, maxValue = 7, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.AcceptsDependencyCycles, ) )
__children["Terrain"]["Dot1"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Terrain"].addChild( Gaffer.Backdrop( "Backdrop" ) )
__children["Terrain"]["Backdrop"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Terrain"]["Backdrop"].addChild( Gaffer.Box2fPlug( "__uiBound", defaultValue = imath.Box2f( imath.V2f( -10, -10 ), imath.V2f( 10, 10 ) ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Terrain"].addChild( GafferOSL.OSLShader( "FloatToVector" ) )
__children["Terrain"]["FloatToVector"].loadShader( "Conversion/FloatToVector" )
__children["Terrain"]["FloatToVector"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Terrain"].addChild( GafferOSL.OSLShader( "VectorToFloat" ) )
__children["Terrain"]["VectorToFloat"].loadShader( "Conversion/VectorToFloat" )
__children["Terrain"]["VectorToFloat"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Terrain"].addChild( GafferOSL.OSLShader( "AddVector" ) )
__children["Terrain"]["AddVector"].loadShader( "Maths/AddVector" )
__children["Terrain"]["AddVector"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Terrain"].addChild( Gaffer.Dot( "Dot2" ) )
__children["Terrain"]["Dot2"].setup( Gaffer.V3fPlug( "in", defaultValue = imath.V3f( 0, 0, 0 ), interpretation = IECore.GeometricData.Interpretation.Point ) )
__children["Terrain"]["Dot2"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Terrain"].addChild( GafferOSL.OSLShader( "MultiplyFloat" ) )
__children["Terrain"]["MultiplyFloat"].loadShader( "Maths/MultiplyFloat" )
__children["Terrain"]["MultiplyFloat"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Terrain"].addChild( Gaffer.BoxIn( "BoxIn" ) )
__children["Terrain"]["BoxIn"].setup( Gaffer.FloatPlug( "out", defaultValue = 1.0, ) )
__children["Terrain"]["BoxIn"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Terrain"].addChild( Gaffer.FloatPlug( "noise_mult", defaultValue = 1.0, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Terrain"].addChild( Gaffer.BoxIn( "BoxIn1" ) )
__children["Terrain"]["BoxIn1"].setup( Gaffer.FloatPlug( "out", defaultValue = 0.0, ) )
__children["Terrain"]["BoxIn1"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Terrain"].addChild( Gaffer.FloatPlug( "min_length", defaultValue = 0.0, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Terrain"].addChild( Gaffer.BoxIn( "BoxIn2" ) )
__children["Terrain"]["BoxIn2"].setup( Gaffer.FloatPlug( "out", defaultValue = 1.0, ) )
__children["Terrain"]["BoxIn2"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Terrain"].addChild( Gaffer.FloatPlug( "max_length", defaultValue = 1.0, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Terrain"].addChild( Gaffer.Backdrop( "Backdrop1" ) )
__children["Terrain"]["Backdrop1"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Terrain"]["Backdrop1"].addChild( Gaffer.Box2fPlug( "__uiBound", defaultValue = imath.Box2f( imath.V2f( -10, -10 ), imath.V2f( 10, 10 ) ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Terrain"].addChild( GafferOSL.OSLShader( "InColor" ) )
__children["Terrain"]["InColor"].loadShader( "ObjectProcessing/InColor" )
__children["Terrain"]["InColor"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["MergeScenes"] = GafferScene.MergeScenes( "MergeScenes" )
parent.addChild( __children["MergeScenes"] )
__children["MergeScenes"]["in"].addChild( GafferScene.ScenePlug( "in2", flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["MergeScenes"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Backdrop"] = Gaffer.Backdrop( "Backdrop" )
parent.addChild( __children["Backdrop"] )
__children["Backdrop"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Backdrop"].addChild( Gaffer.Box2fPlug( "__uiBound", defaultValue = imath.Box2f( imath.V2f( -10, -10 ), imath.V2f( 10, 10 ) ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Transform2"] = GafferScene.Transform( "Transform2" )
parent.addChild( __children["Transform2"] )
__children["Transform2"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Cs"] = Gaffer.Box( "Cs" )
parent.addChild( __children["Cs"] )
__children["Cs"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Cs"].addChild( Gaffer.BoxIn( "BoxIn" ) )
__children["Cs"]["BoxIn"].setup( GafferScene.ScenePlug( "out", ) )
__children["Cs"]["BoxIn"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Cs"].addChild( GafferScene.ScenePlug( "in", flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Cs"].addChild( Gaffer.BoxOut( "BoxOut" ) )
__children["Cs"]["BoxOut"].setup( GafferScene.ScenePlug( "in", ) )
__children["Cs"]["BoxOut"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Cs"].addChild( GafferScene.ScenePlug( "out", direction = Gaffer.Plug.Direction.Out, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Cs"].addChild( GafferOSL.OSLObject( "OSLObject" ) )
__children["Cs"]["OSLObject"]["primitiveVariables"].addChild( Gaffer.NameValuePlug( "Cs", Gaffer.Color3fPlug( "value", defaultValue = imath.Color3f( 0, 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ), True, "primitiveVariable", Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic ) )
__children["Cs"]["OSLObject"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Cs"].addChild( GafferOSL.OSLShader( "InColor" ) )
__children["Cs"]["InColor"].loadShader( "ObjectProcessing/InColor" )
__children["Cs"]["InColor"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Cs"].addChild( Gaffer.BoxIn( "BoxIn1" ) )
__children["Cs"]["BoxIn1"].setup( GafferScene.FilterPlug( "out", defaultValue = 0, minValue = 0, maxValue = 7, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.AcceptsDependencyCycles, ) )
__children["Cs"]["BoxIn1"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Cs"].addChild( GafferScene.FilterPlug( "in1", defaultValue = 0, minValue = 0, maxValue = 7, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic | Gaffer.Plug.Flags.AcceptsDependencyCycles, ) )
__children["Dot"] = Gaffer.Dot( "Dot" )
parent.addChild( __children["Dot"] )
__children["Dot"].setup( GafferScene.FilterPlug( "in", defaultValue = 0, minValue = 0, maxValue = 7, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.AcceptsDependencyCycles, ) )
__children["Dot"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Dot1"] = Gaffer.Dot( "Dot1" )
parent.addChild( __children["Dot1"] )
__children["Dot1"].setup( GafferScene.FilterPlug( "in", defaultValue = 0, minValue = 0, maxValue = 7, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.AcceptsDependencyCycles, ) )
__children["Dot1"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Backdrop1"] = Gaffer.Backdrop( "Backdrop1" )
parent.addChild( __children["Backdrop1"] )
__children["Backdrop1"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Backdrop1"].addChild( Gaffer.Box2fPlug( "__uiBound", defaultValue = imath.Box2f( imath.V2f( -10, -10 ), imath.V2f( 10, 10 ) ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Backdrop2"] = Gaffer.Backdrop( "Backdrop2" )
parent.addChild( __children["Backdrop2"] )
__children["Backdrop2"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Backdrop2"].addChild( Gaffer.Box2fPlug( "__uiBound", defaultValue = imath.Box2f( imath.V2f( -10, -10 ), imath.V2f( 10, 10 ) ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
parent["frame"].setValue( 56.0 )
parent["variables"]["imageCataloguePort"]["value"].setValue( 32807 )
parent["variables"]["projectName"]["value"].setValue( 'bendDeformerExample' )
parent["variables"]["projectRootDirectory"]["value"].setValue( '/development/DemoGafferExtension/doc/examples' )
Gaffer.Metadata.registerValue( parent["variables"]["imageCataloguePort"], 'readOnly', True )
Gaffer.Metadata.registerValue( parent["variables"]["projectName"]["name"], 'readOnly', True )
Gaffer.Metadata.registerValue( parent["variables"]["projectRootDirectory"]["name"], 'readOnly', True )
__children["SceneReader"]["fileName"].setValue( '${project:rootDirectory}/alembic/line.abc' )
__children["SceneReader"]["__uiPosition"].setValue( imath.V2f( 68.5213165, -58.3769379 ) )
__children["PathFilter"]["paths"].setValue( IECore.StringVectorData( [ '/plane' ] ) )
__children["PathFilter"]["__uiPosition"].setValue( imath.V2f( -3.67484951, -79.9515686 ) )
__children["Instancer"]["in"].setInput( __children["Orientation"]["out"] )
__children["Instancer"]["filter"].setInput( __children["PathFilter"]["out"] )
__children["Instancer"]["prototypes"].setInput( __children["Transform2"]["out"] )
__children["Instancer"]["prototypeIndex"].setValue( 'prototypeIndex' )
__children["Instancer"]["orientation"].setValue( 'orientation' )
__children["Instancer"]["scale"].setValue( 'scale' )
__children["Instancer"]["attributePrefix"].setValue( 'user:' )
__children["Instancer"]["__uiPosition"].setValue( imath.V2f( -11.1191931, -95.0138397 ) )
__children["BendDeformer"]["in"].setInput( __children["SceneReader"]["out"] )
__children["BendDeformer"]["filter"].setInput( __children["PathFilter1"]["out"] )
__children["BendDeformer"]["bendAxis"].setValue( 2 )
__children["BendDeformer"]["angle"].setInput( __children["Expression"]["__out"]["p0"] )
__children["BendDeformer"]["captureAxis"].setValue( 1 )
__children["BendDeformer"]["__uiPosition"].setValue( imath.V2f( 68.5213165, -66.541008 ) )
__children["PathFilter1"]["paths"].setValue( IECore.StringVectorData( [ '/object' ] ) )
__children["PathFilter1"]["__uiPosition"].setValue( imath.V2f( 85.9883957, -62.3703156 ) )
__children["Expression"]["__uiPosition"].setValue( imath.V2f( 56.4571075, -66.5711136 ) )
__children["Orientation"]["in"].setInput( __children["Terrain"]["out"] )
__children["Orientation"]["filter"].setInput( __children["PathFilter"]["out"] )
__children["Orientation"]["deleteInputs"].setValue( False )
__children["Orientation"]["inYAxis"].setValue( '\\' )
__children["Orientation"]["randomEnabled"].setValue( True )
__children["Orientation"]["randomAxis"].setValue( imath.V3f( 1, 0, 0 ) )
__children["Orientation"]["randomSpread"].setValue( 47.72999954223633 )
__children["Orientation"]["randomTwist"].setValue( 29.510000228881836 )
__children["Orientation"]["__uiPosition"].setValue( imath.V2f( -22.5891838, -84.0096741 ) )
__children["Terrain"]["__uiPosition"].setValue( imath.V2f( -22.5891838, -74.9276581 ) )
__children["Terrain"]["Plane"]["dimensions"].setValue( imath.V2f( 5, 5 ) )
__children["Terrain"]["Plane"]["divisions"].setValue( imath.V2i( 100, 100 ) )
__children["Terrain"]["Plane"]["__uiPosition"].setValue( imath.V2f( -5.05085659, 44.221447 ) )
__children["Terrain"]["OSLObject1"]["in"].setInput( __children["Terrain"]["Transform"]["out"] )
__children["Terrain"]["OSLObject1"]["filter"].setInput( __children["Terrain"]["Dot1"]["out"] )
__children["Terrain"]["OSLObject1"]["primitiveVariables"]["primitiveVariable"]["value"].setInput( __children["Terrain"]["AddVector"]["out"]["out"] )
__children["Terrain"]["OSLObject1"]["__uiPosition"].setValue( imath.V2f( -5.05085659, 3.97157621 ) )
__children["Terrain"]["InPoint1"]["__uiPosition"].setValue( imath.V2f( -83.2270279, -1.45975065 ) )
__children["Terrain"]["PathFilter2"]["paths"].setValue( IECore.StringVectorData( [ '/plane' ] ) )
__children["Terrain"]["PathFilter2"]["__uiPosition"].setValue( imath.V2f( 14.9929771, 37.905098 ) )
__children["Terrain"]["Noise1"]["parameters"]["type"].setValue( 'simplex' )
__children["Terrain"]["Noise1"]["parameters"]["scale"].setValue( 3.2300000190734863 )
__children["Terrain"]["Noise1"]["parameters"]["p"].setInput( __children["Terrain"]["InPoint1"]["out"]["value"] )
__children["Terrain"]["Noise1"]["parameters"]["t"].setValue( 600.0 )
__children["Terrain"]["Noise1"]["__uiPosition"].setValue( imath.V2f( -66.3470383, -0.259750843 ) )
__children["Terrain"]["BoxOut"]["in"].setInput( __children["Terrain"]["OSLObject"]["out"] )
Gaffer.Metadata.registerValue( __children["Terrain"]["BoxOut"]["in"], 'noduleLayout:section', 'top' )
Gaffer.Metadata.registerValue( __children["Terrain"]["BoxOut"]["__out"], 'nodule:color', imath.Color3f( 0.240099996, 0.339399993, 0.485000014 ) )
Gaffer.Metadata.registerValue( __children["Terrain"]["BoxOut"]["__out"], 'nodule:type', 'GafferUI::StandardNodule' )
Gaffer.Metadata.registerValue( __children["Terrain"]["BoxOut"]["__out"], 'description', 'The input scene' )
Gaffer.Metadata.registerValue( __children["Terrain"]["BoxOut"]["__out"], 'plugValueWidget:type', '' )
Gaffer.Metadata.registerValue( __children["Terrain"]["BoxOut"]["__out"], 'noduleLayout:spacing', 2.0 )
__children["Terrain"]["BoxOut"]["__uiPosition"].setValue( imath.V2f( -3.55085659, -77.7505417 ) )
__children["Terrain"]["out"].setInput( __children["Terrain"]["BoxOut"]["__out"] )
Gaffer.Metadata.registerValue( __children["Terrain"]["out"], 'nodule:color', imath.Color3f( 0.240099996, 0.339399993, 0.485000014 ) )
Gaffer.Metadata.registerValue( __children["Terrain"]["out"], 'nodule:type', 'GafferUI::StandardNodule' )
Gaffer.Metadata.registerValue( __children["Terrain"]["out"], 'description', 'The input scene' )
Gaffer.Metadata.registerValue( __children["Terrain"]["out"], 'plugValueWidget:type', '' )
Gaffer.Metadata.registerValue( __children["Terrain"]["out"], 'noduleLayout:spacing', 2.0 )
Gaffer.Metadata.registerValue( __children["Terrain"]["out"], 'noduleLayout:section', 'bottom' )
__children["Terrain"]["OSLObject"]["in"].setInput( __children["Terrain"]["OSLObject1"]["out"] )
__children["Terrain"]["OSLObject"]["filter"].setInput( __children["Terrain"]["Dot"]["out"] )
__children["Terrain"]["OSLObject"]["useAttributes"].setValue( True )
__children["Terrain"]["OSLObject"]["primitiveVariables"]["primitiveVariable"]["name"].setValue( 'scale' )
__children["Terrain"]["OSLObject"]["primitiveVariables"]["primitiveVariable"]["value"].setInput( __children["Terrain"]["RemapFloat"]["out"]["out"] )
__children["Terrain"]["OSLObject"]["primitiveVariables"]["primitiveVariable1"]["value"].setInput( __children["Terrain"]["InColor"]["out"]["value"] )
__children["Terrain"]["OSLObject"]["__uiPosition"].setValue( imath.V2f( -5.05085659, -47.8531189 ) )
__children["Terrain"]["InPoint"]["__uiPosition"].setValue( imath.V2f( -52.9168015, -47.2531204 ) )
__children["Terrain"]["Noise"]["parameters"]["scale"].setValue( 1.3700000047683716 )
__children["Terrain"]["Noise"]["parameters"]["p"].setInput( __children["Terrain"]["InPoint"]["out"]["value"] )
__children["Terrain"]["Noise"]["__uiPosition"].setValue( imath.V2f( -40.5564232, -47.2531204 ) )
__children["Terrain"]["RemapFloat"]["parameters"]["in"].setInput( __children["Terrain"]["Noise"]["out"]["n"] )
__children["Terrain"]["RemapFloat"]["parameters"]["minIn"].setValue( 0.30000001192092896 )
__children["Terrain"]["RemapFloat"]["parameters"]["maxIn"].setValue( 0.699999988079071 )
__children["Terrain"]["RemapFloat"]["parameters"]["minOut"].setInput( __children["Terrain"]["BoxIn1"]["out"] )
__children["Terrain"]["RemapFloat"]["parameters"]["maxOut"].setInput( __children["Terrain"]["BoxIn2"]["out"] )
__children["Terrain"]["RemapFloat"]["__uiPosition"].setValue( imath.V2f( -24.2632713, -47.2531204 ) )
__children["Terrain"]["Transform"]["in"].setInput( __children["Terrain"]["Plane"]["out"] )
__children["Terrain"]["Transform"]["filter"].setInput( __children["Terrain"]["PathFilter2"]["out"] )
__children["Terrain"]["Transform"]["transform"]["rotate"].setValue( imath.V3f( 90, 0, 0 ) )
__children["Terrain"]["Transform"]["__uiPosition"].setValue( imath.V2f( -5.05085659, 34.5617752 ) )
__children["Terrain"]["Dot"]["in"].setInput( __children["Terrain"]["Dot1"]["out"] )
__children["Terrain"]["Dot"]["__uiPosition"].setValue( imath.V2f( 14.9929771, -44.4830704 ) )
__children["Terrain"]["Dot1"]["in"].setInput( __children["Terrain"]["PathFilter2"]["out"] )
__children["Terrain"]["Dot1"]["__uiPosition"].setValue( imath.V2f( 14.9929771, 7.3714447 ) )
__children["Terrain"]["Backdrop"]["title"].setValue( 'Scale attribute' )
__children["Terrain"]["Backdrop"]["scale"].setValue( 1.2000000476837158 )
__children["Terrain"]["Backdrop"]["description"].setValue( 'Add a scale attribute that is later used by the instancer\n\nWe also add a base color' )
__children["Terrain"]["Backdrop"]["__uiPosition"].setValue( imath.V2f( -24.7759552, -39.8055725 ) )
__children["Terrain"]["Backdrop"]["__uiBound"].setValue( imath.Box2f( imath.V2f( -36.0737839, -31.5597382 ), imath.V2f( 34.2250977, 12.6000004 ) ) )
__children["Terrain"]["FloatToVector"]["parameters"]["x"].setInput( __children["Terrain"]["VectorToFloat"]["out"]["x"] )
__children["Terrain"]["FloatToVector"]["parameters"]["y"].setInput( __children["Terrain"]["VectorToFloat"]["out"]["y"] )
__children["Terrain"]["FloatToVector"]["parameters"]["z"].setInput( __children["Terrain"]["MultiplyFloat"]["out"]["out"] )
__children["Terrain"]["FloatToVector"]["__uiPosition"].setValue( imath.V2f( -42.5251198, 8.1085062 ) )
__children["Terrain"]["VectorToFloat"]["parameters"]["p"].setInput( __children["Terrain"]["InPoint1"]["out"]["value"] )
__children["Terrain"]["VectorToFloat"]["__uiPosition"].setValue( imath.V2f( -58.1994514, 13.044569 ) )
__children["Terrain"]["AddVector"]["parameters"]["a"].setInput( __children["Terrain"]["FloatToVector"]["out"]["p"] )
__children["Terrain"]["AddVector"]["parameters"]["b"].setInput( __children["Terrain"]["Dot2"]["out"] )
__children["Terrain"]["AddVector"]["__uiPosition"].setValue( imath.V2f( -20.597538, 4.57157612 ) )
__children["Terrain"]["Dot2"]["in"].setInput( __children["Terrain"]["InPoint1"]["out"]["value"] )
Gaffer.Metadata.registerValue( __children["Terrain"]["Dot2"]["in"], 'noduleLayout:section', 'left' )
Gaffer.Metadata.registerValue( __children["Terrain"]["Dot2"]["out"], 'noduleLayout:section', 'right' )
__children["Terrain"]["Dot2"]["__uiPosition"].setValue( imath.V2f( -58.9911995, -9.12297153 ) )
__children["Terrain"]["MultiplyFloat"]["parameters"]["a"].setInput( __children["Terrain"]["Noise1"]["out"]["n"] )
__children["Terrain"]["MultiplyFloat"]["parameters"]["b"].setInput( __children["Terrain"]["BoxIn"]["out"] )
__children["Terrain"]["MultiplyFloat"]["__uiPosition"].setValue( imath.V2f( -52.0604477, -0.259750843 ) )
__children["Terrain"]["BoxIn"]["name"].setValue( 'noise_mult' )
__children["Terrain"]["BoxIn"]["__in"].setInput( __children["Terrain"]["noise_mult"] )
Gaffer.Metadata.registerValue( __children["Terrain"]["BoxIn"]["__in"], 'nodule:color', imath.Color3f( 0.246700004, 0.376199991, 0.469999999 ) )
Gaffer.Metadata.registerValue( __children["Terrain"]["BoxIn"]["__in"], 'noduleLayout:section', 'left' )
Gaffer.Metadata.registerValue( __children["Terrain"]["BoxIn"]["__in"], 'userDefault', None )
Gaffer.Metadata.registerValue( __children["Terrain"]["BoxIn"]["__in"], 'description', '' )
Gaffer.Metadata.registerValue( __children["Terrain"]["BoxIn"]["__in"], 'label', None )
Gaffer.Metadata.registerValue( __children["Terrain"]["BoxIn"]["__in"], 'presetNames', None )
Gaffer.Metadata.registerValue( __children["Terrain"]["BoxIn"]["__in"], 'presetValues', None )
Gaffer.Metadata.registerValue( __children["Terrain"]["BoxIn"]["__in"], 'plugValueWidget:type', None )
Gaffer.Metadata.registerValue( __children["Terrain"]["BoxIn"]["__in"], 'nodule:type', None )
Gaffer.Metadata.registerValue( __children["Terrain"]["BoxIn"]["__in"], 'noduleLayout:visible', True )
Gaffer.Metadata.registerValue( __children["Terrain"]["BoxIn"]["__in"], 'noduleLayout:label', None )
Gaffer.Metadata.registerValue( __children["Terrain"]["BoxIn"]["out"], 'noduleLayout:section', 'right' )
__children["Terrain"]["BoxIn"]["__uiPosition"].setValue( imath.V2f( -74.8195114, -11.9065704 ) )
Gaffer.Metadata.registerValue( __children["Terrain"]["noise_mult"], 'nodule:color', imath.Color3f( 0.246700004, 0.376199991, 0.469999999 ) )
Gaffer.Metadata.registerValue( __children["Terrain"]["noise_mult"], 'noduleLayout:section', 'left' )
Gaffer.Metadata.registerValue( __children["Terrain"]["noise_mult"], 'userDefault', None )
Gaffer.Metadata.registerValue( __children["Terrain"]["noise_mult"], 'description', '' )
Gaffer.Metadata.registerValue( __children["Terrain"]["noise_mult"], 'presetNames', None )
Gaffer.Metadata.registerValue( __children["Terrain"]["noise_mult"], 'presetValues', None )
Gaffer.Metadata.registerValue( __children["Terrain"]["noise_mult"], 'plugValueWidget:type', None )
Gaffer.Metadata.registerValue( __children["Terrain"]["noise_mult"], 'nodule:type', None )
Gaffer.Metadata.registerValue( __children["Terrain"]["noise_mult"], 'noduleLayout:visible', True )
Gaffer.Metadata.registerValue( __children["Terrain"]["noise_mult"], 'noduleLayout:label', None )
__children["Terrain"]["BoxIn1"]["name"].setValue( 'min_length' )
__children["Terrain"]["BoxIn1"]["__in"].setInput( __children["Terrain"]["min_length"] )
Gaffer.Metadata.registerValue( __children["Terrain"]["BoxIn1"]["__in"], 'nodule:color', imath.Color3f( 0.246700004, 0.376199991, 0.469999999 ) )
Gaffer.Metadata.registerValue( __children["Terrain"]["BoxIn1"]["__in"], 'noduleLayout:section', 'left' )
Gaffer.Metadata.registerValue( __children["Terrain"]["BoxIn1"]["__in"], 'userDefault', None )
Gaffer.Metadata.registerValue( __children["Terrain"]["BoxIn1"]["__in"], 'description', '' )
Gaffer.Metadata.registerValue( __children["Terrain"]["BoxIn1"]["__in"], 'label', None )
Gaffer.Metadata.registerValue( __children["Terrain"]["BoxIn1"]["__in"], 'presetNames', None )
Gaffer.Metadata.registerValue( __children["Terrain"]["BoxIn1"]["__in"], 'presetValues', None )
Gaffer.Metadata.registerValue( __children["Terrain"]["BoxIn1"]["__in"], 'plugValueWidget:type', None )
Gaffer.Metadata.registerValue( __children["Terrain"]["BoxIn1"]["__in"], 'nodule:type', None )
Gaffer.Metadata.registerValue( __children["Terrain"]["BoxIn1"]["__in"], 'noduleLayout:visible', True )
Gaffer.Metadata.registerValue( __children["Terrain"]["BoxIn1"]["__in"], 'noduleLayout:label', None )
Gaffer.Metadata.registerValue( __children["Terrain"]["BoxIn1"]["out"], 'noduleLayout:section', 'right' )
__children["Terrain"]["BoxIn1"]["__uiPosition"].setValue( imath.V2f( -51.2206459, -60.0924911 ) )
__children["Terrain"]["min_length"].setValue( 1.0 )
Gaffer.Metadata.registerValue( __children["Terrain"]["min_length"], 'nodule:color', imath.Color3f( 0.246700004, 0.376199991, 0.469999999 ) )
Gaffer.Metadata.registerValue( __children["Terrain"]["min_length"], 'noduleLayout:section', 'left' )
Gaffer.Metadata.registerValue( __children["Terrain"]["min_length"], 'userDefault', None )
Gaffer.Metadata.registerValue( __children["Terrain"]["min_length"], 'description', '' )
Gaffer.Metadata.registerValue( __children["Terrain"]["min_length"], 'label', None )
Gaffer.Metadata.registerValue( __children["Terrain"]["min_length"], 'presetNames', None )
Gaffer.Metadata.registerValue( __children["Terrain"]["min_length"], 'presetValues', None )
Gaffer.Metadata.registerValue( __children["Terrain"]["min_length"], 'plugValueWidget:type', None )
Gaffer.Metadata.registerValue( __children["Terrain"]["min_length"], 'nodule:type', None )
Gaffer.Metadata.registerValue( __children["Terrain"]["min_length"], 'noduleLayout:visible', True )
Gaffer.Metadata.registerValue( __children["Terrain"]["min_length"], 'noduleLayout:label', None )
__children["Terrain"]["BoxIn2"]["name"].setValue( 'max_length' )
__children["Terrain"]["BoxIn2"]["__in"].setInput( __children["Terrain"]["max_length"] )
Gaffer.Metadata.registerValue( __children["Terrain"]["BoxIn2"]["__in"], 'nodule:color', imath.Color3f( 0.246700004, 0.376199991, 0.469999999 ) )
Gaffer.Metadata.registerValue( __children["Terrain"]["BoxIn2"]["__in"], 'noduleLayout:section', 'left' )
Gaffer.Metadata.registerValue( __children["Terrain"]["BoxIn2"]["__in"], 'userDefault', None )
Gaffer.Metadata.registerValue( __children["Terrain"]["BoxIn2"]["__in"], 'description', '' )
Gaffer.Metadata.registerValue( __children["Terrain"]["BoxIn2"]["__in"], 'label', None )
Gaffer.Metadata.registerValue( __children["Terrain"]["BoxIn2"]["__in"], 'presetNames', None )
Gaffer.Metadata.registerValue( __children["Terrain"]["BoxIn2"]["__in"], 'presetValues', None )
Gaffer.Metadata.registerValue( __children["Terrain"]["BoxIn2"]["__in"], 'plugValueWidget:type', None )
Gaffer.Metadata.registerValue( __children["Terrain"]["BoxIn2"]["__in"], 'nodule:type', None )
Gaffer.Metadata.registerValue( __children["Terrain"]["BoxIn2"]["__in"], 'noduleLayout:visible', True )
Gaffer.Metadata.registerValue( __children["Terrain"]["BoxIn2"]["__in"], 'noduleLayout:label', None )
Gaffer.Metadata.registerValue( __children["Terrain"]["BoxIn2"]["out"], 'noduleLayout:section', 'right' )
__children["Terrain"]["BoxIn2"]["__uiPosition"].setValue( imath.V2f( -51.0818558, -66.9995117 ) )
__children["Terrain"]["max_length"].setValue( 3.0 )
Gaffer.Metadata.registerValue( __children["Terrain"]["max_length"], 'nodule:color', imath.Color3f( 0.246700004, 0.376199991, 0.469999999 ) )
Gaffer.Metadata.registerValue( __children["Terrain"]["max_length"], 'noduleLayout:section', 'left' )
Gaffer.Metadata.registerValue( __children["Terrain"]["max_length"], 'userDefault', None )
Gaffer.Metadata.registerValue( __children["Terrain"]["max_length"], 'description', '' )
Gaffer.Metadata.registerValue( __children["Terrain"]["max_length"], 'label', None )
Gaffer.Metadata.registerValue( __children["Terrain"]["max_length"], 'presetNames', None )
Gaffer.Metadata.registerValue( __children["Terrain"]["max_length"], 'presetValues', None )
Gaffer.Metadata.registerValue( __children["Terrain"]["max_length"], 'plugValueWidget:type', None )
Gaffer.Metadata.registerValue( __children["Terrain"]["max_length"], 'nodule:type', None )
Gaffer.Metadata.registerValue( __children["Terrain"]["max_length"], 'noduleLayout:visible', True )
Gaffer.Metadata.registerValue( __children["Terrain"]["max_length"], 'noduleLayout:label', None )
__children["Terrain"]["Backdrop1"]["title"].setValue( 'Position noise' )
__children["Terrain"]["Backdrop1"]["scale"].setValue( 1.2000000476837158 )
__children["Terrain"]["Backdrop1"]["description"].setValue( 'Add noise to the position to generate a simple terrain' )
__children["Terrain"]["Backdrop1"]["__uiPosition"].setValue( imath.V2f( -48.0304871, 5.39381027 ) )
__children["Terrain"]["Backdrop1"]["__uiBound"].setValue( imath.Box2f( imath.V2f( -51.4796295, -26.0462189 ), imath.V2f( 57.4796295, 23.8005695 ) ) )
__children["Terrain"]["InColor"]["parameters"]["defaultValue"].setValue( imath.Color3f( 0.140000001, 0.0961332843, 0.00840000063 ) )
__children["Terrain"]["InColor"]["__uiPosition"].setValue( imath.V2f( -25.3131142, -57.4468727 ) )
__children["MergeScenes"]["in"][0].setInput( __children["Orientation"]["out"] )
__children["MergeScenes"]["in"][1].setInput( __children["Instancer"]["out"] )
__children["MergeScenes"]["__uiPosition"].setValue( imath.V2f( -19.5891838, -105.23407 ) )
__children["Backdrop"]["title"].setValue( 'Example: Bend Deformer' )
__children["Backdrop"]["scale"].setValue( 1.5 )
__children["Backdrop"]["description"].setValue( 'This setup shows an examplary usage of the bend deformer to generate\nan environment patch that could be used in the background of a scene.\n\nWe read a line from an alembic cache and bend it around the Z axis.\nThe bend angle is driven by an OSL expression that is the sinus function\nof the current time remapped to a reasonable value to imitate a little wind.\n\nAfter bending the animated curve is instanced on a terrain like shaped plane. If you view the `MergeScene` node in the `World Machine` backdrop and scrub through the timeline you should see the gras slightly moving `in the wind`\n\nNOTE: If the SceneReader of the line throws an error, set the project:rootDirectory context variable to the directory where you load this scene from.\n' )
__children["Backdrop"]["__uiPosition"].setValue( imath.V2f( 24.5770073, 7.72560501 ) )
__children["Backdrop"]["__uiBound"].setValue( imath.Box2f( imath.V2f( 2.32860756, -20.8055382 ), imath.V2f( 89.4474945, 23.6263676 ) ) )
__children["Transform2"]["in"].setInput( __children["Cs"]["out"] )
__children["Transform2"]["filter"].setInput( __children["Dot"]["out"] )
__children["Transform2"]["transform"]["rotate"].setValue( imath.V3f( -90, 0, 0 ) )
__children["Transform2"]["transform"]["scale"].setValue( imath.V3f( 0.200000003, 0.200000003, 0.200000003 ) )
__children["Transform2"]["__uiPosition"].setValue( imath.V2f( 68.5213242, -86.8497696 ) )
__children["Cs"]["__uiPosition"].setValue( imath.V2f( 68.5213165, -76.9961166 ) )
__children["Cs"]["BoxIn"]["__in"].setInput( __children["Cs"]["in"] )
Gaffer.Metadata.registerValue( __children["Cs"]["BoxIn"]["__in"], 'nodule:color', imath.Color3f( 0.240099996, 0.339399993, 0.485000014 ) )
Gaffer.Metadata.registerValue( __children["Cs"]["BoxIn"]["__in"], 'nodule:type', 'GafferUI::StandardNodule' )
Gaffer.Metadata.registerValue( __children["Cs"]["BoxIn"]["__in"], 'description', 'The processed output scene.' )
Gaffer.Metadata.registerValue( __children["Cs"]["BoxIn"]["out"], 'noduleLayout:section', 'bottom' )
__children["Cs"]["BoxIn"]["__uiPosition"].setValue( imath.V2f( 4.20726013, 18.1827335 ) )
__children["Cs"]["in"].setInput( __children["BendDeformer"]["out"] )
Gaffer.Metadata.registerValue( __children["Cs"]["in"], 'nodule:color', imath.Color3f( 0.240099996, 0.339399993, 0.485000014 ) )
Gaffer.Metadata.registerValue( __children["Cs"]["in"], 'nodule:type', 'GafferUI::StandardNodule' )
Gaffer.Metadata.registerValue( __children["Cs"]["in"], 'description', 'The processed output scene.' )
Gaffer.Metadata.registerValue( __children["Cs"]["in"], 'noduleLayout:section', 'top' )
__children["Cs"]["BoxOut"]["in"].setInput( __children["Cs"]["OSLObject"]["out"] )
Gaffer.Metadata.registerValue( __children["Cs"]["BoxOut"]["in"], 'noduleLayout:section', 'top' )
Gaffer.Metadata.registerValue( __children["Cs"]["BoxOut"]["__out"], 'nodule:color', imath.Color3f( 0.240099996, 0.339399993, 0.485000014 ) )
Gaffer.Metadata.registerValue( __children["Cs"]["BoxOut"]["__out"], 'nodule:type', 'GafferUI::StandardNodule' )
Gaffer.Metadata.registerValue( __children["Cs"]["BoxOut"]["__out"], 'description', 'The input scene' )
Gaffer.Metadata.registerValue( __children["Cs"]["BoxOut"]["__out"], 'plugValueWidget:type', '' )
Gaffer.Metadata.registerValue( __children["Cs"]["BoxOut"]["__out"], 'noduleLayout:spacing', 2.0 )
__children["Cs"]["BoxOut"]["__uiPosition"].setValue( imath.V2f( 4.20726013, -6.39999962 ) )
__children["Cs"]["out"].setInput( __children["Cs"]["BoxOut"]["__out"] )
Gaffer.Metadata.registerValue( __children["Cs"]["out"], 'nodule:color', imath.Color3f( 0.240099996, 0.339399993, 0.485000014 ) )
Gaffer.Metadata.registerValue( __children["Cs"]["out"], 'nodule:type', 'GafferUI::StandardNodule' )
Gaffer.Metadata.registerValue( __children["Cs"]["out"], 'description', 'The input scene' )
Gaffer.Metadata.registerValue( __children["Cs"]["out"], 'plugValueWidget:type', '' )
Gaffer.Metadata.registerValue( __children["Cs"]["out"], 'noduleLayout:spacing', 2.0 )
Gaffer.Metadata.registerValue( __children["Cs"]["out"], 'noduleLayout:section', 'bottom' )
__children["Cs"]["OSLObject"]["in"].setInput( __children["Cs"]["BoxIn"]["out"] )
__children["Cs"]["OSLObject"]["filter"].setInput( __children["Cs"]["BoxIn1"]["out"] )
__children["Cs"]["OSLObject"]["useAttributes"].setValue( True )
__children["Cs"]["OSLObject"]["primitiveVariables"]["primitiveVariable"]["value"].setInput( __children["Cs"]["InColor"]["out"]["value"] )
__children["Cs"]["OSLObject"]["__uiPosition"].setValue( imath.V2f( 4.20726013, 6.90000153 ) )
__children["Cs"]["InColor"]["parameters"]["defaultValue"].setValue( imath.Color3f( 0.0667225048, 0.129999995, 0.0227500014 ) )
__children["Cs"]["InColor"]["__uiPosition"].setValue( imath.V2f( -12.1000042, 7.50000143 ) )
__children["Cs"]["BoxIn1"]["name"].setValue( 'in1' )
__children["Cs"]["BoxIn1"]["__in"].setInput( __children["Cs"]["in1"] )
Gaffer.Metadata.registerValue( __children["Cs"]["BoxIn1"]["__in"], 'nodule:color', imath.Color3f( 0.689999998, 0.537800014, 0.228300005 ) )
Gaffer.Metadata.registerValue( __children["Cs"]["BoxIn1"]["__in"], 'description', 'The result of the filter. This should be connected into\nthe "filter" plug of a FilteredSceneProcessor.' )
Gaffer.Metadata.registerValue( __children["Cs"]["BoxIn1"]["__in"], 'plugValueWidget:type', '' )
Gaffer.Metadata.registerValue( __children["Cs"]["BoxIn1"]["out"], 'noduleLayout:section', 'left' )
__children["Cs"]["BoxIn1"]["__uiPosition"].setValue( imath.V2f( 20.969244, 6.90000153 ) )
__children["Cs"]["in1"].setInput( __children["Dot1"]["out"] )
Gaffer.Metadata.registerValue( __children["Cs"]["in1"], 'nodule:color', imath.Color3f( 0.689999998, 0.537800014, 0.228300005 ) )
Gaffer.Metadata.registerValue( __children["Cs"]["in1"], 'description', 'The result of the filter. This should be connected into\nthe "filter" plug of a FilteredSceneProcessor.' )
Gaffer.Metadata.registerValue( __children["Cs"]["in1"], 'plugValueWidget:type', '' )
Gaffer.Metadata.registerValue( __children["Cs"]["in1"], 'noduleLayout:section', 'right' )
__children["Dot"]["in"].setInput( __children["Dot1"]["out"] )
__children["Dot"]["__uiPosition"].setValue( imath.V2f( 85.9883957, -83.3510513 ) )
__children["Dot1"]["in"].setInput( __children["PathFilter1"]["out"] )
__children["Dot1"]["__uiPosition"].setValue( imath.V2f( 85.9883957, -72.7971573 ) )
__children["Backdrop1"]["title"].setValue( 'Bend the line' )
__children["Backdrop1"]["scale"].setValue( 1.5 )
__children["Backdrop1"]["description"].setValue( "The SceneReader loads the alembic cache of the line from disk and pipes the geometry to the BendDeformer node.\n\nOn this node we set the `bend axis` to Z and the `capture axis` to Y.\nThe `bend axis` describes the axis we want to bend around, whereas\nthe `capture axis` determines the main axis of the object we base some calculation on. Since the line is pointing in positive Y direction, Y is used here. This is based on the capture axis found on the bend node in Houdini, although we set the capture length automatically.\n\nThe lower and upper bound are likely the same as found in Maya's non-linear bend deformer.\n\nAfter bending, we simply add a color and scale/rotate the line for use in the instancer.\n\n\n\n" )
__children["Backdrop1"]["__uiPosition"].setValue( imath.V2f( 47.6496506, -40.9462509 ) )
__children["Backdrop1"]["__uiBound"].setValue( imath.Box2f( imath.V2f( -21.0156479, -54.4573441 ), imath.V2f( 66.3811493, 25.3184605 ) ) )
__children["Backdrop2"]["title"].setValue( 'World Machine' )
__children["Backdrop2"]["scale"].setValue( 1.5 )
__children["Backdrop2"]["description"].setValue( 'We create a simple terrain like patch here and instance our bended line on the vertices.' )
__children["Backdrop2"]["__uiPosition"].setValue( imath.V2f( -42.9069672, -78.6294861 ) )
__children["Backdrop2"]["__uiBound"].setValue( imath.Box2f( imath.V2f( -8.43928909, -34.464653 ), imath.V2f( 64.8865738, 26.6579361 ) ) )
__children["Expression"]["__engine"].setValue( 'OSL' )
__children["Expression"]["__expression"].setValue( 'parent.__out.p0 = sin(time * 1.5) * 35;' )


del __children

