import Gaffer
import GafferImage
import GafferOSL
import GafferScene
import IECore
import imath

Gaffer.Metadata.registerValue( parent, "serialiser:milestoneVersion", 0, persistent=False )
Gaffer.Metadata.registerValue( parent, "serialiser:majorVersion", 58, persistent=False )
Gaffer.Metadata.registerValue( parent, "serialiser:minorVersion", 4, persistent=False )
Gaffer.Metadata.registerValue( parent, "serialiser:patchVersion", 0, persistent=False )

__children = {}

parent["variables"].addChild( Gaffer.NameValuePlug( "image:catalogue:port", Gaffer.IntPlug( "value", defaultValue = 0, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ), "imageCataloguePort", Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic ) )
parent["variables"].addChild( Gaffer.NameValuePlug( "project:name", Gaffer.StringPlug( "value", defaultValue = 'default', flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ), "projectName", Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic ) )
parent["variables"].addChild( Gaffer.NameValuePlug( "project:rootDirectory", Gaffer.StringPlug( "value", defaultValue = '$HOME/gaffer/projects/${project:name}', flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ), "projectRootDirectory", Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic ) )
__children["defaultFormat"] = GafferImage.FormatPlug( "defaultFormat", defaultValue = GafferImage.Format( 1920, 1080, 1.000 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, )
parent.addChild( __children["defaultFormat"] )
__children["Cube"] = GafferScene.Cube( "Cube" )
parent.addChild( __children["Cube"] )
__children["Cube"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["OSLObject"] = GafferOSL.OSLObject( "OSLObject" )
parent.addChild( __children["OSLObject"] )
__children["OSLObject"]["primitiveVariables"].addChild( Gaffer.NameValuePlug( "P", Gaffer.V3fPlug( "value", defaultValue = imath.V3f( 0, 0, 0 ), interpretation = IECore.GeometricData.Interpretation.Point ), True, "primitiveVariable", Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic ) )
__children["OSLObject"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["InPoint"] = GafferOSL.OSLShader( "InPoint" )
parent.addChild( __children["InPoint"] )
__children["InPoint"].loadShader( "ObjectProcessing/InPoint" )
__children["InPoint"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["BendPrototype"] = GafferOSL.OSLCode( "BendPrototype" )
parent.addChild( __children["BendPrototype"] )
__children["BendPrototype"]["parameters"].addChild( Gaffer.V3fPlug( "inP", defaultValue = imath.V3f( 0, 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, interpretation = IECore.GeometricData.Interpretation.Point ) )
__children["BendPrototype"]["parameters"].addChild( Gaffer.FloatPlug( "deg", defaultValue = 0.0, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["BendPrototype"]["parameters"].addChild( Gaffer.FloatPlug( "offset", defaultValue = 0.0, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["BendPrototype"]["out"].addChild( Gaffer.V3fPlug( "outP", direction = Gaffer.Plug.Direction.Out, defaultValue = imath.V3f( 0, 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, interpretation = IECore.GeometricData.Interpretation.Point ) )
__children["BendPrototype"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["PathFilter"] = GafferScene.PathFilter( "PathFilter" )
parent.addChild( __children["PathFilter"] )
__children["PathFilter"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
parent["frame"].setValue( 21.0 )
parent["variables"]["imageCataloguePort"]["value"].setValue( 45035 )
Gaffer.Metadata.registerValue( parent["variables"]["imageCataloguePort"], 'readOnly', True )
Gaffer.Metadata.registerValue( parent["variables"]["projectName"]["name"], 'readOnly', True )
Gaffer.Metadata.registerValue( parent["variables"]["projectRootDirectory"]["name"], 'readOnly', True )
__children["Cube"]["__uiPosition"].setValue( imath.V2f( -4.64999866, 16.0500011 ) )
__children["OSLObject"]["in"].setInput( __children["Cube"]["out"] )
__children["OSLObject"]["filter"].setInput( __children["PathFilter"]["out"] )
__children["OSLObject"]["primitiveVariables"]["primitiveVariable"]["value"].setInput( __children["BendPrototype"]["out"]["outP"] )
__children["OSLObject"]["__uiPosition"].setValue( imath.V2f( -4.64999866, 5.14999866 ) )
__children["InPoint"]["__uiPosition"].setValue( imath.V2f( -41.2575951, 5.14999866 ) )
__children["BendPrototype"]["parameters"]["inP"].setInput( __children["InPoint"]["out"]["value"] )
__children["BendPrototype"]["parameters"]["deg"].setValue( 47.25 )
__children["BendPrototype"]["code"].setValue( '/* \nTODO: Change coordinate calculation order. The paper uses a right-handed coordinate system with the Z-axis pointing upwards. \n\nTODO: Add upper and lower bounds\n\nTODO: Check offset\n\nTODO: Add option to choose bending axis\n\n*/\n\n// read input points in working variable\npoint pos = point(inP);\n\nfloat rad_angle = radians(deg);\nfloat k = rad_angle;\nfloat teta = k * ( pos[1] - offset );\nfloat C_teta = cos(teta);\nfloat S_teta = sin(teta);\n\noutP[0] = pos[0];\noutP[1] = -S_teta * (pos[2] - 1/k) + offset ;\noutP[2] = C_teta * (pos[2] - 1/k) + 1/k;' )
__children["BendPrototype"]["__uiPosition"].setValue( imath.V2f( -22.6541729, 5.14999866 ) )
__children["PathFilter"]["paths"].setValue( IECore.StringVectorData( [ '/cube' ] ) )
__children["PathFilter"]["__uiPosition"].setValue( imath.V2f( 15.0917425, 9.57188892 ) )


del __children

